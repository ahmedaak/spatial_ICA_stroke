"0","# define vectors to save each (across iterations) result - NB ""all"" refers to all iterations of the testing phase unless otherwise specified"
"0","lambdas_all <- c() # all lambdas"
"0","coef_all <- c() # all coefficients"
"0","auc_all <- c() # all AUCs"
"0","acc_all <- c() # all accuracy values"
"0","roc_sens_all <- c() # all ROC sensitivities (all thresholds)"
"0","roc_spec_all <- c() # all ROC specificities (all thresholds)"
"0","opt_t_all <- c() # all optimal thresholds from ROC analysis (maximizes sens + spec)"
"0","opt_sens_all <- c() # all optimal sensitivities"
"0","opt_spec_all <- c() # all optimal specificities"
"0","kappa_all <- c() # all Cohen's kappas"
"0","mse_all <- c() # all MSEs"
"0","# CREATE BALANCED DATASET + TRAIN MODEL ON IT"
"0","# select the features of rows corresponding to HICs"
"0","HFE_full_HIC <- HFE_full[HFE_full$HIC==1,]"
"0","# select the features of rows corresponding to non-HICs"
"0","HFE_full_nonHIC <- HFE_full[HFE_full$HIC==0,]"
"0","# select a sample of non-HICs equal to n of HICs (indices, then features)"
"0","HFE_full_nonHIC_subsamp_index <- sample(x = nrow(HFE_full_nonHIC), size = nrow(HFE_full_HIC), replace = FALSE)"
"0","HFE_full_nonHIC_subsamp <- HFE_full_nonHIC[HFE_full_nonHIC_subsamp_index,]"
"0","# combine the HICs + nonHICs features"
"0","HFE_full_balanced_subsamp <- rbind(HFE_full_HIC, HFE_full_nonHIC_subsamp)"
"0","# split model data into training and test"
"0","# select 80% of data as sample size for training"
"0","HFE_balanced_subsamp_training_n <- floor(0.8*nrow(HFE_full_balanced_subsamp))"
"0","# find training data indices"
"0","HFE_balanced_subsamp_training_i <-sample(seq_len(nrow(HFE_full_balanced_subsamp)),size=HFE_balanced_subsamp_training_n) "
"0","# select training data"
"0","HFE_balanced_subsamp_training <- HFE_full_balanced_subsamp[HFE_balanced_subsamp_training_i,]"
"0","# select test data"
"0","HFE_balanced_subsamp_test <- HFE_full_balanced_subsamp[-HFE_balanced_subsamp_training_i,]"
"0","# train ELASTIC NET GLM on BALANCED data"
"0","excl_var <-  c(1,2,3, 13) # variables to EXCLUDE from model"
"0","# fit model"
"0","# get lambda WARNING: IS ""MSE"" THE CORRECT LOSS FUNC TO USE HERE??? + THIS IS LOO CV"
"0","lasso_HFE_crossval <- cv.glmnet(x = as.matrix(HFE_balanced_subsamp_training[,-excl_var]), nfolds = nrow(HFE_balanced_subsamp_training), y = as.matrix(HFE_balanced_subsamp_training[,3]), family = ""binomial"", alpha = 0.5, type.measure = ""mse"", grouped = FALSE) "
"0","# get the MSE corresponding to the minimum lambda according to http://bit.ly/2kW0aII"
"0","mse.min <- lasso_HFE_crossval$cvm[lasso_HFE_crossval$lambda == lasso_HFE_crossval$lambda.min]"
"0","# get coefficients"
"0","lasso_HFE_coef <- coef.glmnet(object = lasso_HFE_crossval, s = lasso_HFE_crossval$lambda.min)"
"0","# put coefficients into a proper vector"
"0","lasso_HFE_coef <- unname(lasso_HFE_coef, force = FALSE) # unname matrix"
"2","dimnames(.) <- NULL:  translated to 
dimnames(.) <- list(NULL,NULL)  <==>  unname(.)
"
"0","lasso_HFE_coef <- as.vector(lasso_HFE_coef) # turn matrix into a vector"
"0","for (i in 1:10000) {"
"0","  # CREATE UNBALANCED (REALISTIC) TEST DATASET + VALIDATE MODEL ON IT"
"0","    # select a sample of HICs (indices) that were NOT included in the training dataset (n=5 out of possible 15)"
"0","      # get all HICS in test data"
"0","      HFE_feats_unbalanced_test_HIC <- HFE_balanced_subsamp_test[HFE_balanced_subsamp_test$HIC==1,]"
"0","      # get sample of all HICS in test data (5 out of possible 15)"
"0","      HFE_feats_unbalanced_test_HICsample <- sample(x = nrow(HFE_feats_unbalanced_test_HIC), size = 5, replace = FALSE)"
"0","      HFE_feats_unbalanced_test_HICsample_data <- HFE_feats_unbalanced_test_HIC[HFE_feats_unbalanced_test_HICsample,]"
"0","    # select a sample of non-HICs equal to 10*n of HICs (indices, then features) that were NOT included in training"
"0","      HFE_feats_unbalanced_test_nonHICsample_notrain <- HFE_full_nonHIC[-HFE_full_nonHIC_subsamp_index,] # exclude data used during training"
"0","      nonhic_feats_sampleindices_test <- sample(x = nrow(HFE_feats_unbalanced_test_nonHICsample_notrain), size = 10*nrow(HFE_feats_unbalanced_test_HIC), replace = FALSE)"
"0","      nonhic_feats_sample_test <- HFE_feats_unbalanced_test_nonHICsample_notrain[nonhic_feats_sampleindices_test,]"
"0","    # combine the HICs + nonHICs features"
"0","    real_data_feats <- rbind(HFE_feats_unbalanced_test_HIC, nonhic_feats_sample_test)"
"0","  "
"0","  # make predictions on REALISTIC TEST data"
"0","  real_test_predict <- predict(object = lasso_HFE_crossval, newx = as.matrix(real_data_feats[,-excl_var]), s = lasso_HFE_crossval$lambda.min, type = ""response"")"
"0","  real_test_predict <- as.vector(real_test_predict) # if I don't do this, ""roc"" gives weird warning to pass a vector instead of matrix (still runs tho)"
"0","  # assess the performance of the model on the REALISTIC TEST data"
"0","  test.class<-as.numeric(as.character(real_data_feats[,3])) # The true class, i.e. outcome"
"0","  # Assess performance in terms of AUC for training set:"
"0","  test.rocurve<-roc(response=test.class, predictor=real_test_predict) # calculate a ROC curve"
"0","  test.AUC<-test.rocurve$auc #+auc(roc=rocurve)"
"0","  # Find threshold (t) that minimizes error according to http://bit.ly/2k6UgCG "
"0","  e <- cbind(test.rocurve$thresholds,test.rocurve$sensitivities+test.rocurve$specificities)"
"0","  opt_t <- subset(e,e[,2]==max(e[,2]))[,1]"
"0","  # find sensitivity + specificity at t"
"0","  # find row of t"
"0","  row_t <- which(x = e[,1]==opt_t)"
"0","  # match to row in sens/spec vector"
"0","  opt_sens <- test.rocurve$sensitivities[row_t]"
"0","  opt_spec <- test.rocurve$specificities[row_t]"
"0","  # define predicted classes based on threshold (t)"
"0","  test.prediction.class = real_test_predict>opt_t"
"0","  # Assess performance in terms of accuracy (%) for training set:"
"0","  test.accuracy <- 1-sum(xor(test.prediction.class, test.class))/nrow(real_data_feats)"
"0","  cmat = table(test.class, test.prediction.class) # confusion matrix (contingency table)"
"0","  # Assess performance in terms of Cohen's kappa for test set: Why? because it's insensitive to class imbalance"
"0","  test_kappa <- kappa2(cbind(test.class, test.prediction.class))$value"
"0","  # save all results (across iterations)"
"0","  auc_all <- append(auc_all, test.AUC)"
"0","  lambdas_all <- append(lambdas_all, lasso_HFE_crossval$lambda.min)"
"0","  coef_all <- cbind(coef_all, lasso_HFE_coef) "
"0","  rownames(coef_all) <- c(""intercept"", colnames(real_data_feats[,-excl_var])) # put the variable names back"
"0","  OR_all <- exp(coef_all) # convert coefficients to odds ratios"
"0","  acc_all <- append(acc_all, test.accuracy)"
"0","  roc_sens_all <- cbind(roc_sens_all, test.rocurve$sensitivities)"
"0","  roc_spec_all <- cbind (roc_spec_all, test.rocurve$specificities)"
"0","  opt_t_all <- append(opt_t_all, opt_t)"
"0","  opt_sens_all <- append(opt_sens_all, opt_sens)"
"0","  opt_spec_all <- append(opt_spec_all, opt_spec)"
"0","  kappa_all <- append(kappa_all, test_kappa)"
"0","  mse_all <- append(mse_all, mse.min)}"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"2","longer object length is not a multiple of shorter object length"
"0","# plot all ROC curves, one on top of the other"
"0","matplot(1-roc_spec_all, roc_sens_all, type = ""l"", lwd = ""2"", lty = 1)"
