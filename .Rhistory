for (i in 1:100) {
# CREATE UNBALANCED (REALISTIC) TEST DATASET + VALIDATE MODEL ON IT
# select a sample of HICs (indices) that were NOT included in the training dataset (n=5 out of possible 15)
# get all HICS in test data
HFE_feats_unbalanced_test_HIC <- HFE_balanced_subsamp_test[HFE_balanced_subsamp_test$HIC==1,]
# get sample of all HICS in test data (5 out of possible 15)
HFE_feats_unbalanced_test_HICsample <- sample(x = nrow(HFE_feats_unbalanced_test_HIC), size = 5, replace = FALSE)
HFE_feats_unbalanced_test_HICsample_data <- HFE_feats_unbalanced_test_HIC[HFE_feats_unbalanced_test_HICsample,]
# select a sample of non-HICs equal to 10*n of HICs (indices, then features) that were NOT included in training
HFE_feats_unbalanced_test_nonHICsample_notrain <- HFE_full_nonHIC[-HFE_full_nonHIC_subsamp_index,] # exclude data used during training
nonhic_feats_sampleindices_test <- sample(x = nrow(HFE_feats_unbalanced_test_nonHICsample_notrain), size = 10*nrow(HFE_feats_unbalanced_test_HIC), replace = FALSE)
nonhic_feats_sample_test <- HFE_feats_unbalanced_test_nonHICsample_notrain[nonhic_feats_sampleindices_test,]
# combine the HICs + nonHICs features
real_data_feats <- rbind(HFE_feats_unbalanced_test_HIC, nonhic_feats_sample_test)
# make predictions on REALISTIC TEST data
real_test_predict <- predict(object = lasso_HFE_crossval, newx = as.matrix(real_data_feats[,-excl_var]), s = lasso_HFE_crossval$lambda.min, type = "response")
real_test_predict <- as.vector(real_test_predict) # if I don't do this, "roc" gives weird warning to pass a vector instead of matrix (still runs tho)
# assess the performance of the model on the REALISTIC TEST data
test.class<-as.numeric(real_data_feats[,3]) # The true class, i.e. outcome
# Assess performance in terms of AUC for training set:
test.rocurve<-roc(response=test.class, predictor=real_test_predict) # calculate a ROC curve
test.AUC<-test.rocurve$auc #+auc(roc=rocurve)
#cat("Performance on test set: AUC=",test.AUC,"\n")
# Find threshold (t) that minimizes error according to http://bit.ly/2k6UgCG
e <- cbind(test.rocurve$thresholds,test.rocurve$sensitivities+test.rocurve$specificities)
opt_t <- subset(e,e[,2]==max(e[,2]))[,1]
# find sensitivity + specificity at t
# find row of t
row_t <- which(x = e[,1]==opt_t)
# match to row in sens/spec vector
opt_sens <- test.rocurve$sensitivities[row_t]
opt_spec <- test.rocurve$specificities[row_t]
# define predicted classes based on threshold (t)
test.prediction.class = real_test_predict>opt_t
# Assess performance in terms of accuracy (%) for training set:
test.accuracy <- 1-sum(xor(test.prediction.class, test.class))/nrow(real_data_feats)
cmat = table(test.class, test.prediction.class) # confusion matrix (contingency table)
# Assess performance in terms of Cohen's kappa for test set: Why? because it's insensitive to class imbalance
test_kappa <- kappa2(cbind(test.class, test.prediction.class))$value
#cat('accuracy on test set:',100*test.accuracy, '%')
# save all results (across iterations)
auc_all <- append(auc_all, test.AUC)
lambdas_all <- append(lambdas_all, lasso_HFE_crossval$lambda.min)
coef_all <- cbind(coef_all, lasso_HFE_coef)
rownames(coef_all) <- c("intercept", colnames(real_data_feats[,-excl_var])) # put the variable names back
OR_all <- exp(coef_all) # convert coefficients to odds ratios
acc_all <- append(acc_all, test.accuracy)
roc_sens_all <- cbind(roc_sens_all, test.rocurve$sensitivities)
roc_spec_all <- cbind (roc_spec_all, test.rocurve$specificities)
opt_t_all <- append(opt_t_all, opt_t)
opt_sens_all <- append(opt_sens_all, opt_sens)
opt_spec_all <- append(opt_spec_all, opt_spec)
kappa_all <- append(kappa_all, test_kappa)
mse_all <- append(mse_all, mse.min)}
# plot all ROC curves, one on top of the other
matplot(1-roc_spec_all, roc_sens_all, type = "l", lwd = "2", lty = 1)
abline(a = 0, b = 1)
# report main results
cat("Median performance on real test set: AUC=",median(auc_all),"\n")
cat("Median accuracy on real test set: ",median(acc_all),"\n")
cat("Median optimal sensitivity on real test set: ", median(opt_sens_all), "\n")
cat("Median optimal specificity on real test set: ", median(opt_spec_all), "\n")
cat("Median Cohen's kappa on real test set: ", median(kappa_all), "\n")
kappa2
?kappa2
boxplot(kappa_all)
cbind(test.class, test.prediction.class))$value
cbind(test.class, test.prediction.class))
cbind(test.class, test.prediction.class)
acc_all
test.class<-as.numeric(as.character(real_data_feats[,3])) # The true class, i.e. outcome
test.class
# define vectors to save each (across iterations) result - NB "all" refers to all iterations of the testing phase unless otherwise specified
lambdas_all <- c() # all lambdas
coef_all <- c() # all coefficients
auc_all <- c() # all AUCs
acc_all <- c() # all accuracy values
roc_sens_all <- c() # all ROC sensitivities (all thresholds)
roc_spec_all <- c() # all ROC specificities (all thresholds)
opt_t_all <- c() # all optimal thresholds from ROC analysis (maximizes sens + spec)
opt_sens_all <- c() # all optimal sensitivities
opt_spec_all <- c() # all optimal specificities
kappa_all <- c() # all Cohen's kappas
mse_all <- c() # all MSEs
# CREATE BALANCED DATASET + TRAIN MODEL ON IT
# select the features of rows corresponding to HICs
HFE_full_HIC <- HFE_full[HFE_full$HIC==1,]
# select the features of rows corresponding to non-HICs
HFE_full_nonHIC <- HFE_full[HFE_full$HIC==0,]
# select a sample of non-HICs equal to n of HICs (indices, then features)
HFE_full_nonHIC_subsamp_index <- sample(x = nrow(HFE_full_nonHIC), size = nrow(HFE_full_HIC), replace = FALSE)
HFE_full_nonHIC_subsamp <- HFE_full_nonHIC[HFE_full_nonHIC_subsamp_index,]
# combine the HICs + nonHICs features
HFE_full_balanced_subsamp <- rbind(HFE_full_HIC, HFE_full_nonHIC_subsamp)
# split model data into training and test
# select 80% of data as sample size for training
HFE_balanced_subsamp_training_n <- floor(0.8*nrow(HFE_full_balanced_subsamp))
# find training data indices
HFE_balanced_subsamp_training_i <-sample(seq_len(nrow(HFE_full_balanced_subsamp)),size=HFE_balanced_subsamp_training_n)
# select training data
HFE_balanced_subsamp_training <- HFE_full_balanced_subsamp[HFE_balanced_subsamp_training_i,]
# select test data
HFE_balanced_subsamp_test <- HFE_full_balanced_subsamp[-HFE_balanced_subsamp_training_i,]
# train ELASTIC NET GLM on BALANCED data
excl_var <-  c(1,2,3) # variables to EXCLUDE from model
# fit model
# get lambda WARNING: IS "MSE" THE CORRECT LOSS FUNC TO USE HERE??? + THIS IS LOO CV
lasso_HFE_crossval <- cv.glmnet(x = as.matrix(HFE_balanced_subsamp_training[,-excl_var]), nfolds = nrow(HFE_balanced_subsamp_training), y = as.matrix(HFE_balanced_subsamp_training[,3]), family = "binomial", alpha = 0.5, type.measure = "mse", grouped = FALSE)
# get the MSE corresponding to the minimum lambda according to http://bit.ly/2kW0aII
mse.min <- lasso_HFE_crossval$cvm[lasso_HFE_crossval$lambda == lasso_HFE_crossval$lambda.min]
# get coefficients
lasso_HFE_coef <- coef.glmnet(object = lasso_HFE_crossval, s = lasso_HFE_crossval$lambda.min)
# put coefficients into a proper vector
lasso_HFE_coef <- unname(lasso_HFE_coef, force = FALSE) # unname matrix
lasso_HFE_coef <- as.vector(lasso_HFE_coef) # turn matrix into a vector
for (i in 1:100) {
# CREATE UNBALANCED (REALISTIC) TEST DATASET + VALIDATE MODEL ON IT
# select a sample of HICs (indices) that were NOT included in the training dataset (n=5 out of possible 15)
# get all HICS in test data
HFE_feats_unbalanced_test_HIC <- HFE_balanced_subsamp_test[HFE_balanced_subsamp_test$HIC==1,]
# get sample of all HICS in test data (5 out of possible 15)
HFE_feats_unbalanced_test_HICsample <- sample(x = nrow(HFE_feats_unbalanced_test_HIC), size = 5, replace = FALSE)
HFE_feats_unbalanced_test_HICsample_data <- HFE_feats_unbalanced_test_HIC[HFE_feats_unbalanced_test_HICsample,]
# select a sample of non-HICs equal to 10*n of HICs (indices, then features) that were NOT included in training
HFE_feats_unbalanced_test_nonHICsample_notrain <- HFE_full_nonHIC[-HFE_full_nonHIC_subsamp_index,] # exclude data used during training
nonhic_feats_sampleindices_test <- sample(x = nrow(HFE_feats_unbalanced_test_nonHICsample_notrain), size = 10*nrow(HFE_feats_unbalanced_test_HIC), replace = FALSE)
nonhic_feats_sample_test <- HFE_feats_unbalanced_test_nonHICsample_notrain[nonhic_feats_sampleindices_test,]
# combine the HICs + nonHICs features
real_data_feats <- rbind(HFE_feats_unbalanced_test_HIC, nonhic_feats_sample_test)
# make predictions on REALISTIC TEST data
real_test_predict <- predict(object = lasso_HFE_crossval, newx = as.matrix(real_data_feats[,-excl_var]), s = lasso_HFE_crossval$lambda.min, type = "response")
real_test_predict <- as.vector(real_test_predict) # if I don't do this, "roc" gives weird warning to pass a vector instead of matrix (still runs tho)
# assess the performance of the model on the REALISTIC TEST data
test.class<-as.numeric(as.character(real_data_feats[,3])) # The true class, i.e. outcome
# Assess performance in terms of AUC for training set:
test.rocurve<-roc(response=test.class, predictor=real_test_predict) # calculate a ROC curve
test.AUC<-test.rocurve$auc #+auc(roc=rocurve)
#cat("Performance on test set: AUC=",test.AUC,"\n")
# Find threshold (t) that minimizes error according to http://bit.ly/2k6UgCG
e <- cbind(test.rocurve$thresholds,test.rocurve$sensitivities+test.rocurve$specificities)
opt_t <- subset(e,e[,2]==max(e[,2]))[,1]
# find sensitivity + specificity at t
# find row of t
row_t <- which(x = e[,1]==opt_t)
# match to row in sens/spec vector
opt_sens <- test.rocurve$sensitivities[row_t]
opt_spec <- test.rocurve$specificities[row_t]
# define predicted classes based on threshold (t)
test.prediction.class = real_test_predict>opt_t
# Assess performance in terms of accuracy (%) for training set:
test.accuracy <- 1-sum(xor(test.prediction.class, test.class))/nrow(real_data_feats)
cmat = table(test.class, test.prediction.class) # confusion matrix (contingency table)
# Assess performance in terms of Cohen's kappa for test set: Why? because it's insensitive to class imbalance
test_kappa <- kappa2(cbind(test.class, test.prediction.class))$value
#cat('accuracy on test set:',100*test.accuracy, '%')
# save all results (across iterations)
auc_all <- append(auc_all, test.AUC)
lambdas_all <- append(lambdas_all, lasso_HFE_crossval$lambda.min)
coef_all <- cbind(coef_all, lasso_HFE_coef)
rownames(coef_all) <- c("intercept", colnames(real_data_feats[,-excl_var])) # put the variable names back
OR_all <- exp(coef_all) # convert coefficients to odds ratios
acc_all <- append(acc_all, test.accuracy)
roc_sens_all <- cbind(roc_sens_all, test.rocurve$sensitivities)
roc_spec_all <- cbind (roc_spec_all, test.rocurve$specificities)
opt_t_all <- append(opt_t_all, opt_t)
opt_sens_all <- append(opt_sens_all, opt_sens)
opt_spec_all <- append(opt_spec_all, opt_spec)
kappa_all <- append(kappa_all, test_kappa)
mse_all <- append(mse_all, mse.min)}
# plot all ROC curves, one on top of the other
matplot(1-roc_spec_all, roc_sens_all, type = "l", lwd = "2", lty = 1)
abline(a = 0, b = 1)
# report main results
cat("Median performance on real test set: AUC=",median(auc_all),"\n")
cat("Median accuracy on real test set: ",median(acc_all),"\n")
cat("Median optimal sensitivity on real test set: ", median(opt_sens_all), "\n")
cat("Median optimal specificity on real test set: ", median(opt_spec_all), "\n")
cat("Median Cohen's kappa on real test set: ", median(kappa_all), "\n")
mse_all
OR_all
str(OR_all)
str(as.data.frame(OR_all))
colMeans(OR_all)
rowMeans(OR_all)
rowMeans(coef_all)
library(kableExtra)
kable(OR_all)
HFE_balanced_subsamp_training
?cv.glmnet
roc_spec_all
matplot(1-rowMeans(roc_spec_all), roc_sens_all, type="l",lwd="2",lty=1)
matplot(1-rowMeans(roc_spec_all), rowMeans(roc_sens_all), type="l",lwd="2",lty=1)
matplot(1-rowMeans(roc_spec_all), rowMeans(roc_sens_all), type="l",lwd="2",lty=1)
matplot(1-(roc_spec_all), roc_sens_all, type="l",lwd="2",lty=1)
knitr::opts_chunk$set(echo = TRUE)
# load necessary packages
library(fmsb)
library(glmnet)
library(irr) # needed to calculate Cohen's kappa
library(pROC)
library(kableExtra)
# load feature values
HFE_feats <- read.csv2("HFE_feats.csv", sep = ",", header = F)
# remove column representing HIC (made redundant by next steps)
HFE_feats <- HFE_feats[,-15]
# load class labels (i.e. which subject, IC #, and which IC is a HIC)
HFE_classlabels <- read.csv2("HFE_classLabels.csv", sep = ",", header =F)
# merge values and labels
HFE_full <- cbind(HFE_classlabels, HFE_feats)
# add column names to full feature matrix
colnames(HFE_full) <- c("subject", "IC_number", "HIC", "delay_WB", "xcovariance_WB", "delay_SSS", "xcovariance_SSS", "delay_SSSIC", "xcovariance_SSSIC", "power_0_001", "power_001_0025", "power_0025_005", "power_005_01", "power_01_015", "power_015_02", "occupancy_VT", "Tmax_delay")
# make sure columns have correct data type
HFE_full$subject <- as.factor(HFE_full$subject)
HFE_full$IC_number <- as.factor(HFE_full$IC_number)
HFE_full$HIC <- as.factor(HFE_full$HIC)
for (i in c(4:17)){
HFE_full[,i] <- as.numeric(as.character(HFE_full[,i]))
}
# divide Tmax delay by ten
HFE_full$Tmax_delay <- HFE_full$Tmax_delay/10
# remove variables not used in further analysis
HFE_full <- HFE_full[,-c(5,7,8,9)]
# normalize all data (each feature from 0 to 1) according to this source: http://bit.ly/2lRfxS4
# create normalize function
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))}
# create empty dataframe for normalized data
HFE_full_norm <- data.frame()
# loop through each patient and normalize features
for (s in unique(HFE_full$subject)) {
HFE_full_norm_sub <- as.data.frame(lapply(HFE_full[HFE_full$subject==(s),4:13], normalize))
HFE_full_norm_sub <- cbind(HFE_full[HFE_full$subject==(s),1:3], HFE_full_norm_sub)
HFE_full_norm <- rbind.data.frame(HFE_full_norm, HFE_full_norm_sub)}
# get normalized data frame of features of HICs & non-HICs
HFE_full_norm_HIC <- HFE_full_norm[HFE_full_norm$HIC==1,]
HFE_full_norm_nonHIC <- HFE_full_norm[HFE_full_norm$HIC==0,]
# take mean of each column (feature)
HFE_full_norm_HIC_mean <- colMeans(HFE_full_norm_HIC[,4:13], na.rm = T)
HFE_full_norm_nonHIC_mean <- colMeans(HFE_full_norm_nonHIC[,4:13], na.rm = T)
# take SEM of each column (feature) based on http://stackoverflow.com/questions/2676554/in-r-how-to-find-the-standard-error-of-the-mean
HFE_full_norm_HIC_sem <- sapply(HFE_full_norm_HIC[,4:13],function(x)sqrt(var(x, na.rm = T)/length(na.omit(x))))
HFE_full_norm_nonHIC_sem <- sapply(HFE_full_norm_nonHIC[,4:13],function(x)sqrt(var(x, na.rm = T)/length(na.omit(x))))
# take SD of each column (feature)
HFE_full_norm_HIC_sd <- apply(HFE_full_norm_HIC[,4:13],2,sd, na.rm = T)
HFE_full_norm_nonHIC_sd <- apply(HFE_full_norm_nonHIC[,4:13],2,sd, na.rm = T)
# get mean +/- 95% CI of each feature
HFE_full_norm_HIC_meanplus <- HFE_full_norm_HIC_mean+(1.96*HFE_full_norm_HIC_sem)
HFE_full_norm_HIC_meanminus <- HFE_full_norm_HIC_mean-(1.96*HFE_full_norm_HIC_sem)
features_HIC <- rbind(HFE_full_norm_HIC_meanplus, HFE_full_norm_HIC_mean, HFE_full_norm_HIC_meanminus)
HFE_full_norm_nonHIC_meanplus <- HFE_full_norm_nonHIC_mean+(1.96*HFE_full_norm_nonHIC_sem)
HFE_full_norm_nonHIC_meanminus <- HFE_full_norm_nonHIC_mean-(1.96*HFE_full_norm_nonHIC_sem)
features_nonHIC <- rbind(HFE_full_norm_nonHIC_meanplus, HFE_full_norm_nonHIC_mean, HFE_full_norm_nonHIC_meanminus)
# add minimum (0) and maximum (1) rows to all features
features_HIC <- as.data.frame(rbind(rep(1,10) , rep(0,10) , features_HIC))
# plot both HIC and non-HIC together
radar_title = c("Mean +/- 95% CI of normalized feature values")
radarchart(rbind(features_HIC, features_nonHIC), pcol = c("red", "red", "red", "blue", "blue", "blue"), plty = c(2, 1, 2, 2, 1, 2), pty = c(32, 16, 32, 32, 16, 32),  title = radar_title, plwd = c(2, 3, 2, 2, 3, 2), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
# define vectors to save each (across iterations) result - NB "all" refers to all iterations of the testing phase unless otherwise specified
lambdas_all <- c() # all lambdas
coef_all <- c() # all coefficients
auc_all <- c() # all AUCs
acc_all <- c() # all accuracy values
roc_sens_all <- c() # all ROC sensitivities (all thresholds)
roc_spec_all <- c() # all ROC specificities (all thresholds)
opt_t_all <- c() # all optimal thresholds from ROC analysis (maximizes sens + spec)
opt_sens_all <- c() # all optimal sensitivities
opt_spec_all <- c() # all optimal specificities
kappa_all <- c() # all Cohen's kappas
mse_all <- c() # all MSEs
# CREATE BALANCED DATASET + TRAIN MODEL ON IT
# select the features of rows corresponding to HICs
HFE_full_HIC <- HFE_full[HFE_full$HIC==1,]
# select the features of rows corresponding to non-HICs
HFE_full_nonHIC <- HFE_full[HFE_full$HIC==0,]
# select a sample of non-HICs equal to n of HICs (indices, then features)
HFE_full_nonHIC_subsamp_index <- sample(x = nrow(HFE_full_nonHIC), size = nrow(HFE_full_HIC), replace = FALSE)
HFE_full_nonHIC_subsamp <- HFE_full_nonHIC[HFE_full_nonHIC_subsamp_index,]
# combine the HICs + nonHICs features
HFE_full_balanced_subsamp <- rbind(HFE_full_HIC, HFE_full_nonHIC_subsamp)
# split model data into training and test
# select 80% of data as sample size for training
HFE_balanced_subsamp_training_n <- floor(0.8*nrow(HFE_full_balanced_subsamp))
# find training data indices
HFE_balanced_subsamp_training_i <-sample(seq_len(nrow(HFE_full_balanced_subsamp)),size=HFE_balanced_subsamp_training_n)
# select training data
HFE_balanced_subsamp_training <- HFE_full_balanced_subsamp[HFE_balanced_subsamp_training_i,]
# select test data
HFE_balanced_subsamp_test <- HFE_full_balanced_subsamp[-HFE_balanced_subsamp_training_i,]
# train ELASTIC NET GLM on BALANCED data
excl_var <-  c(1,2,3, 13) # variables to EXCLUDE from model
# fit model
# get lambda WARNING: IS "MSE" THE CORRECT LOSS FUNC TO USE HERE??? + THIS IS LOO CV
lasso_HFE_crossval <- cv.glmnet(x = as.matrix(HFE_balanced_subsamp_training[,-excl_var]), nfolds = nrow(HFE_balanced_subsamp_training), y = as.matrix(HFE_balanced_subsamp_training[,3]), family = "binomial", alpha = 0.5, type.measure = "mse", grouped = FALSE)
# get the MSE corresponding to the minimum lambda according to http://bit.ly/2kW0aII
mse.min <- lasso_HFE_crossval$cvm[lasso_HFE_crossval$lambda == lasso_HFE_crossval$lambda.min]
# get coefficients
lasso_HFE_coef <- coef.glmnet(object = lasso_HFE_crossval, s = lasso_HFE_crossval$lambda.min)
# put coefficients into a proper vector
lasso_HFE_coef <- unname(lasso_HFE_coef, force = FALSE) # unname matrix
lasso_HFE_coef <- as.vector(lasso_HFE_coef) # turn matrix into a vector
for (i in 1:10000) {
# CREATE UNBALANCED (REALISTIC) TEST DATASET + VALIDATE MODEL ON IT
# select a sample of HICs (indices) that were NOT included in the training dataset (n=5 out of possible 15)
# get all HICS in test data
HFE_feats_unbalanced_test_HIC <- HFE_balanced_subsamp_test[HFE_balanced_subsamp_test$HIC==1,]
# get sample of all HICS in test data (5 out of possible 15)
HFE_feats_unbalanced_test_HICsample <- sample(x = nrow(HFE_feats_unbalanced_test_HIC), size = 5, replace = FALSE)
HFE_feats_unbalanced_test_HICsample_data <- HFE_feats_unbalanced_test_HIC[HFE_feats_unbalanced_test_HICsample,]
# select a sample of non-HICs equal to 10*n of HICs (indices, then features) that were NOT included in training
HFE_feats_unbalanced_test_nonHICsample_notrain <- HFE_full_nonHIC[-HFE_full_nonHIC_subsamp_index,] # exclude data used during training
nonhic_feats_sampleindices_test <- sample(x = nrow(HFE_feats_unbalanced_test_nonHICsample_notrain), size = 10*nrow(HFE_feats_unbalanced_test_HIC), replace = FALSE)
nonhic_feats_sample_test <- HFE_feats_unbalanced_test_nonHICsample_notrain[nonhic_feats_sampleindices_test,]
# combine the HICs + nonHICs features
real_data_feats <- rbind(HFE_feats_unbalanced_test_HIC, nonhic_feats_sample_test)
# make predictions on REALISTIC TEST data
real_test_predict <- predict(object = lasso_HFE_crossval, newx = as.matrix(real_data_feats[,-excl_var]), s = lasso_HFE_crossval$lambda.min, type = "response")
real_test_predict <- as.vector(real_test_predict) # if I don't do this, "roc" gives weird warning to pass a vector instead of matrix (still runs tho)
# assess the performance of the model on the REALISTIC TEST data
test.class<-as.numeric(as.character(real_data_feats[,3])) # The true class, i.e. outcome
# Assess performance in terms of AUC for training set:
test.rocurve<-roc(response=test.class, predictor=real_test_predict) # calculate a ROC curve
test.AUC<-test.rocurve$auc #+auc(roc=rocurve)
# Find threshold (t) that minimizes error according to http://bit.ly/2k6UgCG
e <- cbind(test.rocurve$thresholds,test.rocurve$sensitivities+test.rocurve$specificities)
opt_t <- subset(e,e[,2]==max(e[,2]))[,1]
# find sensitivity + specificity at t
# find row of t
row_t <- which(x = e[,1]==opt_t)
# match to row in sens/spec vector
opt_sens <- test.rocurve$sensitivities[row_t]
opt_spec <- test.rocurve$specificities[row_t]
# define predicted classes based on threshold (t)
test.prediction.class = real_test_predict>opt_t
# Assess performance in terms of accuracy (%) for training set:
test.accuracy <- 1-sum(xor(test.prediction.class, test.class))/nrow(real_data_feats)
cmat = table(test.class, test.prediction.class) # confusion matrix (contingency table)
# Assess performance in terms of Cohen's kappa for test set: Why? because it's insensitive to class imbalance
test_kappa <- kappa2(cbind(test.class, test.prediction.class))$value
# save all results (across iterations)
auc_all <- append(auc_all, test.AUC)
lambdas_all <- append(lambdas_all, lasso_HFE_crossval$lambda.min)
coef_all <- cbind(coef_all, lasso_HFE_coef)
rownames(coef_all) <- c("intercept", colnames(real_data_feats[,-excl_var])) # put the variable names back
OR_all <- exp(coef_all) # convert coefficients to odds ratios
acc_all <- append(acc_all, test.accuracy)
roc_sens_all <- cbind(roc_sens_all, test.rocurve$sensitivities)
roc_spec_all <- cbind (roc_spec_all, test.rocurve$specificities)
opt_t_all <- append(opt_t_all, opt_t)
opt_sens_all <- append(opt_sens_all, opt_sens)
opt_spec_all <- append(opt_spec_all, opt_spec)
kappa_all <- append(kappa_all, test_kappa)
mse_all <- append(mse_all, mse.min)}
# plot all ROC curves, one on top of the other
matplot(1-roc_spec_all, roc_sens_all, type = "l", lwd = "2", lty = 1)
abline(a = 0, b = 1)
# report main results
cat("Median performance on real test set: AUC=",median(auc_all),"\n")
cat("Median accuracy on real test set: ",median(acc_all),"\n")
cat("Median optimal sensitivity on real test set: ", median(opt_sens_all), "\n")
cat("Median optimal specificity on real test set: ", median(opt_spec_all), "\n")
cat("Median Cohen's kappa on real test set: ", median(kappa_all), "\n")
# plot model performance
par(mfrow=c(3,2))
boxplot(auc_all)
boxplot(acc_all)
boxplot(opt_sens_all)
boxplot(opt_spec_all)
boxplot(kappa_all)
kable(rowMeans(OR_all))
matplot(1-roc_spec_all, roc_sens_all, type = "l", lwd = "2", lty = 1)
matplot(1-roc_spec_all, roc_sens_all, type = "l", lwd = "2", lty = 1); abline(a = 0, b = 1)
matplot(1-rowMeans(roc_spec_all), rowMeans(roc_sens_all), type = "l", lwd = "2", lty = 1); abline(a = 0, b = 1)
matplot(1-roc_spec_all, roc_sens_all, type = "l", lwd = "2", lty = 1); abline(a = 0, b = 1)
matplot(1-rowMeans(roc_spec_all), rowMeans(roc_sens_all), type = "l", lwd = "2", lty = 2, add=T)
matplot(1-rowMeans(roc_spec_all), rowMeans(roc_sens_all), type = "l", lwd = "2", lty = 1, col="blue"); abline(a = 0, b = 1)
matplot(1-roc_spec_all, roc_sens_all, type = "l", lwd = "2", lty = 1, col="blue"); abline(a = 0, b = 1)
matplot(1-rowMeans(roc_spec_all), rowMeans(roc_sens_all), type = "l", lwd = "2", lty = 2)
matplot(1-roc_spec_all, roc_sens_all, type = "l", lwd = "2", lty = 1, col="blue"); abline(a = 0, b = 1)
matplot(1-rowMeans(roc_spec_all), rowMeans(roc_sens_all), type = "l", lwd = "2", lty = 2, add=TRUE)
matplot(1-roc_spec_all, roc_sens_all, type = "l", lwd = "2", lty = 1, col=alpha("blue", alpha=0.5)); abline(a = 0, b = 1)
matplot(1-roc_spec_all, roc_sens_all, type = "l", lwd = "2", lty = 1, col=rgb("blue", alpha=0.5)); abline(a = 0, b = 1)
matplot(1-roc_spec_all, roc_sens_all, type = "l", lwd = "2", lty = 1, col=rgb(0,0,100, alpha=0.5)); abline(a = 0, b = 1)
matplot(1-roc_spec_all, roc_sens_all, type = "l", lwd = "2", lty = 1, col=rgb(0,0,1, alpha=0.5)); abline(a = 0, b = 1)
matplot(1-rowMeans(roc_spec_all), rowMeans(roc_sens_all), type = "l", lwd = "2", lty = 2, add=TRUE)
matplot(1-roc_spec_all, roc_sens_all, type = "l", lwd = "2", lty = 1, col=rgb(0,0,1, alpha=0.5)); abline(a = 0, b = 1)
matplot(1-roc_spec_all, roc_sens_all, type = "l", lwd = "2", lty = 1, col=rgb(0,0,1, alpha=0.9)); abline(a = 0, b = 1)
matplot(1-rowMeans(roc_spec_all), rowMeans(roc_sens_all), type = "l", lwd = "2", lty = 2, add=TRUE)
matplot(1-roc_spec_all, roc_sens_all, type = "l", lwd = "2", lty = 1, col=rgb(0,0,1, alpha=0.1)); abline(a = 0, b = 1)
matplot(1-rowMeans(roc_spec_all), rowMeans(roc_sens_all), type = "l", lwd = "2", lty = 2, add=TRUE)
install.packages("cvAUC")
library(cvAUC)
cvAUC(real_test_predict, test.class)
cvAUC(real_test_predict, test.class, folds=100)
plot(cvAUC(real_test_predict, test.class, folds=100))
cvAUC(real_test_predict, test.class, folds=100)
HFE_full
HFE_full_nonHIC
HFE_full_norm
features_HIC
radar_title = c("Feature values")
radarchart(rbind(HFE_full_norm_HIC, HFE_full_norm_nonHIC), pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
knitr::opts_chunk$set(echo = TRUE)
# load necessary packages
library(fmsb)
library(glmnet)
library(irr) # needed to calculate Cohen's kappa
library(pROC)
library(kableExtra)
radar_title = c("Feature values")
radarchart(rbind(HFE_full_norm_HIC, HFE_full_norm_nonHIC), pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
HFE_full_norm_HIC
radar_title = c("Feature values")
radarchart(rbind(HFE_full_norm_HIC[,4:13], HFE_full_norm_nonHIC[,4:13]), pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
radar_title = c("Feature values")
radarchart(rbind(HFE_full_norm_HIC[,c(4:13)], HFE_full_norm_nonHIC[,c(4:13)]), pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
HFE_full_norm_HIC[,c(4:13)]
radar_title = c("Feature values")
radarchart(rbind(HFE_full_norm_HIC[,c(4:13)], HFE_full_norm_nonHIC[,c(4:13)]), pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
traceback()
radar_title = c("Feature values")
radarchart(rbind(HFE_full_HIC[,c(4:13)], HFE_full_nonHIC[,c(4:13)]), pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
radar_title = c("Feature values")
radarchart(rbind(HFE_full_norm_sub], HFE_full_norm_sub), pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
radar_title = c("Feature values")
radarchart(rbind(HFE_full_norm_sub, HFE_full_norm_sub), pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
HFE_full_norm_sub
radar_title = c("Feature values")
radarchart(rbind(HFE_full_norm_sub[,4:13], HFE_full_norm_sub[,4:13]), pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
HFE_full_norm_sub[,4:13]
radar_title = c("Feature values")
radarchart(HFE_full_norm_sub[,4:13], pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
radar_title = c("Feature values")
radarchart(HFE_full_norm_sub[,4:13], pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
HFE_full_norm
HFE_full_norm_HIC
s
radar_title = c("Feature values")
radarchart(HFE_full_norm_sub[HFE_full$subject==(s),4:13], pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
radar_title = c("Feature values")
radarchart(HFE_full_norm_sub[HFE_full_norm$subject==(s),4:13], pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
radar_title = c("Feature values")
radarchart(HFE_full_norm_sub[HFE_full_norm_HIC$subject==(s),4:13], pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
radar_title = c("Feature values")
radarchart(HFE_full_norm_HIC[HFE_full_norm_HIC$subject==(s),4:13], pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
radar_title = c("Feature values")
radarchart(HFE_full_norm_HIC[HFE_full_norm_HIC$subject==(s),4:13], pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
(HFE_full_norm_HIC[HFE_full_norm_HIC$subject==(s),4:13]
HFE_full_norm_HIC[HFE_full_norm_HIC$subject==(s),4:13]
radar_title = c("Feature values")
radarchart(rbind(HFE_full_norm_HIC[HFE_full_norm_HIC$subject==(s),4:13],HFE_full_norm_HIC_mean), pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
for (s in unique(HFE_full$subject)) {
# plot individual-subject radar plot
radar_title = c("Feature values")
radarchart(rbind(HFE_full_norm_HIC[HFE_full_norm_HIC$subject==(s),4:13], HFE_full_norm_nonHIC[HFE_full_norm_nonHIC$subject==(s),4:13]), pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
}
rbind(HFE_full_norm_HIC[HFE_full_norm_HIC$subject==(s),4:13], HFE_full_norm_nonHIC[HFE_full_norm_nonHIC$subject==(s),4:13])
HFE_full_norm_HIC[HFE_full_norm_HIC$subject==(s),4:13]
HFE_full_norm_HIC
HFE_full_norm_HIC[HFE_full_norm_HIC$subject==(s),4:13]
HFE_full_norm_HIC[HFE_full_norm_HIC$subject==213,4:13]
s
HFE_full_norm_nonHIC[HFE_full_norm_nonHIC$subject==(s),4:13]
HFE_full_norm_nonHIC
HFE_full_norm_nonHIC[HFE_full_norm_nonHIC$subject==213,4:13]
radar_title = c("Feature values")
radarchart(rbind(HFE_full_norm_HIC[HFE_full_norm_HIC$subject==213,4:13], HFE_full_norm_nonHIC[HFE_full_norm_nonHIC$subject==213,4:13]), pcol = c("red", "blue"), plty = c(1,1), pty = c(16,16),  title = radar_title, plwd = c(3,3), vlcex = 1, vlabels = c("Delay to whole-brain", "Delay to sinus", "Power 0 - 0.01 Hz", "Power 0.01 - 0.025 Hz", "Power 0.025 - 0.05 Hz", "Power 0.05 - 0.1 Hz", "Power 0.1 - 0.15 Hz", "Power 0.15 - 0.2 Hz", "VT occupancy", "Tmax delay"))
rbind(HFE_full_norm_HIC[HFE_full_norm_HIC$subject==213,4:13], HFE_full_norm_nonHIC[HFE_full_norm_nonHIC$subject==213,4:13]
)
View(HFE_full)
unique(HFE_full$subject)
getwd()
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
pwi_hm
plot(pwi_hm)
plot(seq(from=1, to=length(pwi_hm)*1.3,pwi_hm))
length(pwi_hm)
nrow(pwi_hm)
nrow(pwi_hm)*1.3
plot(seq(from=1, to=nrow(pwi_hm)*1.3,pwi_hm))
plot(seq(from=1, to=nrow(pwi_hm)*1.3),pwi_hm)
plot(seq(from=1, to=nrow(pwi_hm)*1.3, by=1.3),pwi_hm)
from=1, to=nrow(pwi_hm)*1.3, by=1.3)
from=1,to=nrow(pwi_hm)*1.3, by=1.3)
seq(from=1,to=nrow(pwi_hm)*1.3, by=1.3)
length(seq(from=1,to=nrow(pwi_hm)*1.3, by=1.3))
nrow(pwi_hm)
plot(seq(from=1,to=nrow(pwi_hm)*1.3,by=1.3),pwi_hm))
plot(seq(from=1,to=nrow(pwi_hm)*1.3,by=1.3),pwi_hm)
plot(seq(from=1,to=nrow(pwi_hm)*1.3,by=1.3),pwi_hm)
plot(seq(from=1,to=nrow(pwi_hm)*1.3,by=1.3))
plot(pwi_hm, seq(from=1,to=nrow(pwi_hm)*1.3,by=1.3))
plot(seq(from=1,to=nrow(pwi_hm)*1.3,by=1.3),pwi_hm)
plot(seq(from=1,to=nrow(pwi_hm)*1.3,by=1.3),pwi_hm$V1)
plot(seq(from=1,to=nrow(pwi_hm)*1.3,by=1.3),pwi_hm$V1, type="l")
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/sICA_2019/analysis/plot_hm.R')
